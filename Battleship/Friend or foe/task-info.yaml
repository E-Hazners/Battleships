type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Ships.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    public class Ships {

        int shipsInGame= 5;
        int shipsPlaced = 0;

        public void startPlacingShips(Field field) {
            while(shipsPlaced < shipsInGame) {
                switch (shipsPlaced) {
                    case 0 -> {
                        System.out.println("Enter the coordinates of the Aircraft Carrier (5 cells):");
                        askForCoordinates(field);
                        this.shipsPlaced++;
                        field.printField();
                    }
                    case 1 -> {
                        System.out.println("Enter the coordinates of the Battleship (4 cells):");
                        askForCoordinates(field);
                        this.shipsPlaced++;
                        field.printField();
                    }
                    case 2 -> {
                        System.out.println("Enter the coordinates of the Submarine (3 cells):");
                        askForCoordinates(field);
                        this.shipsPlaced++;
                        field.printField();
                    }
                    case 3 -> {
                        System.out.println("Enter the coordinates of the Cruiser (3 cells):");
                        askForCoordinates(field);
                        this.shipsPlaced++;
                        field.printField();
                    }
                    case 4 -> {
                        System.out.println("Enter the coordinates of the Destroyer (2 cells):");
                        askForCoordinates(field);
                        this.shipsPlaced++;
                        field.printField();
                    }
                    default -> {
                    }
                }
            }
        }

        public void askForCoordinates(Field field) {
            Scanner scanner = new Scanner(System.in);
            boolean check = false;
            String coord1 = "";
            String coord2 = "";
            while(!check) {
                coord1 = scanner.next();
                coord2 = scanner.next();


                check = field.checkSpace(coord1, coord2, shipLength());
            }
            field.updateField(coord1, coord2);

            switch (shipsPlaced) {
                case 0 -> {
                    field.aircraftCarrierCoord1 = coord1;
                    field.aircraftCarrierCoord2 = coord2;
                }
                case 1 -> {
                    field.battleshipCoord1 = coord1;
                    field.battleshipCoord2 = coord2;
                }
                case 2 -> {
                    field.submarineCoord1 = coord1;
                    field.submarineCoord2 = coord2;
                }
                case 3 -> {
                    field.cruiserCoord1 = coord1;
                    field.cruiserCoord2 = coord2;
                }
                case 4 -> {
                    field.destroyerCoord1 = coord1;
                    field.destroyerCoord2 = coord2;
                }
            }
        }

        public int shipLength() {
            if(this.shipsPlaced == 0) {
                return 5;
            } else if (this.shipsPlaced == 1) {
                return 4;
            } else if (this.shipsPlaced == 2 || this.shipsPlaced == 3) {
                return 3;
            } else if (this.shipsPlaced == 4) {
                return 2;
            } else {
                return -1;
            }
        }

    }
  learner_created: true
- name: src/battleship/Field.java
  visible: true
  text: |+
    package battleship;

    import java.util.Objects;

    public class Field {
        String[][] field = new String[11][11];

        public String aircraftCarrierCoord1 = "";
        public String aircraftCarrierCoord2 = "";

        public String battleshipCoord1 = "";
        public String battleshipCoord2 = "";

        public String submarineCoord1 = "";
        public String submarineCoord2 = "";

        public String cruiserCoord1 = "";
        public String cruiserCoord2 = "";

        public String destroyerCoord1 = "";
        public String destroyerCoord2 = "";

        public void createField() {

            char[] alphabet = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'};

            for (int i = 0; i < 11; i++) {
                for (int j = 0; j < 11; j++) {
                    if (i == 0 && j == 0) {
                        field[i][j] = " ";
                    } else if (i == 0) {
                        field[i][j] = String.valueOf(j);
                    } else if (j == 0 ) {
                        field[i][j] = String.valueOf(alphabet[i-1]);
                    } else {
                        field[i][j] = "~";
                    }
                }
            }
        }

        public void printField() {
            for (int i = 0; i < 11; i++) {
                for (int j = 0; j < 11; j++) {

                    System.out.print(field[i][j] + " ");

                }
                System.out.println();
            }
        }

        public void printShots() {
            for (int i = 0; i < 11; i++) {
                for (int j = 0; j < 11; j++) {
                    if(field[i][j] == "O") {
                        System.out.print("~" + " ");
                    } else {
                        System.out.print(field[i][j] + " ");
                    }
                }
                System.out.println();
            }
        }

        public boolean checkSpace(String coord1, String coord2, int shipLength) {

            int firstCoordLetter = assignCoordLetter(coord1);
            int secondCoordLetter = assignCoordLetter(coord2);
            int firstCoordNum = assignCoordNum(coord1);
            int secondCoordNum = assignCoordNum(coord2);


            if(firstCoordNum != secondCoordNum && firstCoordLetter != secondCoordLetter) {
                System.out.println("Error! Wrong ship location! Try Again:");
                return false;
            } else if ((shipLength == (firstCoordNum - secondCoordNum) + 1) || (shipLength == (secondCoordLetter - firstCoordLetter) + 1) ||
                    (shipLength == (secondCoordNum - firstCoordNum) + 1) || (shipLength == (firstCoordLetter - secondCoordLetter) + 1)) {
                return checkTooClose(coord1, coord2);
            } else {
                System.out.println("Error! Wrong length of the Submarine! Try Again:");
                return false;
            }

        }

        public boolean checkTooClose(String coord1, String coord2) {

            int firstCoordLetter = assignCoordLetter(coord1);
            int secondCoordLetter = assignCoordLetter(coord2);
            int firstCoordNum = assignCoordNum(coord1);
            int secondCoordNum = assignCoordNum(coord2);

            // placing the smaller coord in the front
            if(firstCoordLetter > secondCoordLetter) {
                int temp = firstCoordLetter;
                firstCoordLetter = secondCoordLetter;
                secondCoordLetter = temp;
            }

            if(firstCoordNum > secondCoordNum) {
                int temp = firstCoordNum;
                firstCoordNum = secondCoordNum;
                secondCoordNum = temp;
            }

            // checks left top corner
            if (firstCoordLetter == 1 && firstCoordNum == 1) {
                for (int i = firstCoordLetter; i < secondCoordLetter + 2; i++) {
                    for (int j = firstCoordNum; j < secondCoordNum + 2; j++) {

                        if (field[i][j].equals("O")) {
                            System.out.println("Error! You placed it too close to another one. Try again:");
                            return false;
                        }

                    }
                }

                    // checks top right corner
            }else if (firstCoordLetter == 1 && secondCoordNum == 10) {
                for (int i = firstCoordLetter; i < secondCoordLetter + 2; i++) {
                    for (int j = firstCoordNum-1; j < secondCoordNum + 1; j++) {

                        if (field[i][j].equals("O")) {
                            System.out.println("Error! You placed it too close to another one. Try again:");
                            return false;
                        }

                    }
                }

                // checking bottom left corner
            }else if (secondCoordLetter == 10 && firstCoordNum == 1) {
                for (int i = firstCoordLetter-1; i < secondCoordLetter + 1; i++) {
                    for (int j = firstCoordNum; j < secondCoordNum + 2; j++) {

                        if (field[i][j].equals("O")) {
                            System.out.println("Error! You placed it too close to another one. Try again:");
                            return false;
                        }

                    }
                }

                // checking bottom right corner
            } else if (secondCoordLetter == 10 && secondCoordNum == 10) {
                for (int i = firstCoordLetter-1; i < secondCoordLetter + 1; i++) {
                    for (int j = firstCoordNum-1; j < secondCoordNum + 1; j++) {

                        if (field[i][j].equals("O")) {
                            System.out.println("Error! You placed it too close to another one. Try again:");
                            return false;
                        }

                    }
                }

                //checking top line
            } else if (firstCoordLetter == 1) {
                for (int i = firstCoordLetter; i < secondCoordLetter + 2; i++) {
                    for (int j = firstCoordNum-1; j < secondCoordNum + 2; j++) {

                        if (field[i][j].equals("O")) {
                            System.out.println("Error! You placed it too close to another one. Try again:");
                            return false;
                        }

                    }
                }
                //checking right line
            }  else if (secondCoordNum == 10) {
                for (int i = firstCoordLetter-1; i < secondCoordLetter + 2; i++) {
                    for (int j = firstCoordNum-1; j < secondCoordNum + 1; j++) {

                        if (field[i][j].equals("O")) {
                            System.out.println("Error! You placed it too close to another one. Try again:");
                            return false;
                        }

                    }
                }
                //checking left line
            }  else if (firstCoordNum == 1) {
                for (int i = firstCoordLetter-1; i < secondCoordLetter + 2; i++) {
                    for (int j = firstCoordNum; j < secondCoordNum + 2; j++) {

                        if (field[i][j].equals("O")) {
                            System.out.println("Error! You placed it too close to another one. Try again:");
                            return false;
                        }

                    }
                }
                //checking bottom line
            }  else if (secondCoordLetter == 10) {
                for (int i = firstCoordLetter-1; i < secondCoordLetter + 1; i++) {
                    for (int j = firstCoordNum-1; j < secondCoordNum + 2; j++) {

                        if (field[i][j].equals("O")) {
                            System.out.println("Error! You placed it too close to another one. Try again:");
                            return false;
                        }

                    }
                }

            } else {
                for (int i = firstCoordLetter-1; i < secondCoordLetter + 2; i++) {
                    for (int j = firstCoordNum-1; j < secondCoordNum + 2; j++) {

                        if (field[i][j].equals("O")) {
                            System.out.println("Error! You placed it too close to another one. Try again:");
                            return false;
                        }
                    }
                }
            }
            return true;
        }

        public int checkCoordinatesNumber(String coord) {
            if(coord.length() == 3 && coord.charAt(1) == '1' && coord.charAt(2) == '0') {
                return 10;
            } else if (coord.length() == 2){
                return coord.charAt(1) - '0';
            } else {
                return 0;
            }
        }

        public int assignCoordLetter(String coord) {
            char[] alphabet = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'};
            int coordLetter = 0;

            for (int i = 0; i < alphabet.length; i++) {
                if(coord.charAt(0) == alphabet[i]) {
                    coordLetter = i + 1;
                }

            }
            return coordLetter;
        }

        public int assignCoordNum(String coord) {
            char[] alphabet = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'};
            int coordLetter = 0;
            int coordNum = checkCoordinatesNumber(coord);

            for (int i = 0; i < alphabet.length; i++) {
                if(coord.charAt(0) == alphabet[i]) {
                    coordLetter = i + 1;
                }

            }
            return coordNum;
        }
        public void updateField(String coord1, String coord2) {

            int firstCoordLetter = assignCoordLetter(coord1);
            int secondCoordLetter = assignCoordLetter(coord2);
            int firstCoordNum = assignCoordNum(coord1);
            int secondCoordNum = assignCoordNum(coord2);

            // placing the smaller coord in the front
            if(firstCoordLetter > secondCoordLetter) {
                int temp = firstCoordLetter;
                firstCoordLetter = secondCoordLetter;
                secondCoordLetter = temp;
            }

            if(firstCoordNum > secondCoordNum) {
                int temp = firstCoordNum;
                firstCoordNum = secondCoordNum;
                secondCoordNum = temp;
            }


            for (int i = firstCoordLetter; i < secondCoordLetter + 1; i++) {
                for (int j = firstCoordNum; j < secondCoordNum + 1; j++) {

                    field[i][j] = "O";

                }
            }
        }

        // checks if given coordinates are valid on board
        public boolean checkShotValidation(String coord) {

            int coordLetter = assignCoordLetter(coord);
            int coordNum = assignCoordNum(coord);

            if(coordLetter == 0) {
                System.out.println("Error! You entered the wrong coordinates! Try again:");
                return false;
            } else if(coordNum == 0) {
                System.out.println("Error! You entered the wrong coordinates! Try again:");
                return false;
            } else {
                return true;
            }
        }

        public boolean takeAShot(String coord) {
            int coordLetter = assignCoordLetter(coord);
            int coordNum = assignCoordNum(coord);

            if(Objects.equals(field[coordLetter][coordNum], "O")) {
                field[coordLetter][coordNum] = "X";
                System.out.println(checkShipSank());
                return true;
            } else if (Objects.equals(field[coordLetter][coordNum], "~")) {
                field[coordLetter][coordNum] = "M";
                System.out.println("You missed!");
                return true;
            } else {
                return false;
            }

        }

        public boolean checkEmptyField() {
            for (int i = 0; i < 11; i++) {
                for (int j = 0; j < 11; j++) {

                    if(Objects.equals(field[i][j], "O")) {
                        return false;
                    }

                }
            }
            return true;

        }

        String checkShipSank() {
            if(checkEmptyField()) {
                return "You sank the last ship. You won. Congratulations!";
            } else if (checkAircraftLive()) {
                return "You hit a ship! Try Again: ";
            } else if (checkBattleshipLive()) {
                return "You hit a ship! Try Again: ";
            } else if (checkSubmarineLive()) {
                return "You hit a ship! Try Again: ";
            } else if (checkCruiserLive()) {
                return "You hit a ship! Try Again: ";
            } else if (checkDestroyerLive()) {
                return "You hit a ship! Try Again: ";
            } else {
                return "You sank a ship! Specify a new target: ";
            }
        }

        boolean checkAircraftLive() {
            int firstCoordLetter = assignCoordLetter(aircraftCarrierCoord1);
            int secondCoordLetter = assignCoordLetter(aircraftCarrierCoord2);
            int firstCoordNum = assignCoordNum(aircraftCarrierCoord1);
            int secondCoordNum = assignCoordNum(aircraftCarrierCoord2);

            return checkShipLive(firstCoordLetter, secondCoordLetter, firstCoordNum, secondCoordNum);
        }

        boolean checkBattleshipLive() {
            int firstCoordLetter = assignCoordLetter(battleshipCoord1);
            int secondCoordLetter = assignCoordLetter(battleshipCoord2);
            int firstCoordNum = assignCoordNum(battleshipCoord1);
            int secondCoordNum = assignCoordNum(battleshipCoord2);

            return checkShipLive(firstCoordLetter, secondCoordLetter, firstCoordNum, secondCoordNum);
        }

        boolean checkSubmarineLive() {
            int firstCoordLetter = assignCoordLetter(submarineCoord1);
            int secondCoordLetter = assignCoordLetter(submarineCoord2);
            int firstCoordNum = assignCoordNum(submarineCoord1);
            int secondCoordNum = assignCoordNum(submarineCoord2);

            return checkShipLive(firstCoordLetter, secondCoordLetter, firstCoordNum, secondCoordNum);
        }

        boolean checkCruiserLive() {
            int firstCoordLetter = assignCoordLetter(cruiserCoord1);
            int secondCoordLetter = assignCoordLetter(cruiserCoord2);
            int firstCoordNum = assignCoordNum(cruiserCoord1);
            int secondCoordNum = assignCoordNum(cruiserCoord2);

            return checkShipLive(firstCoordLetter, secondCoordLetter, firstCoordNum, secondCoordNum);
        }

        boolean checkDestroyerLive() {
            int firstCoordLetter = assignCoordLetter(destroyerCoord1);
            int secondCoordLetter = assignCoordLetter(destroyerCoord2);
            int firstCoordNum = assignCoordNum(destroyerCoord1);
            int secondCoordNum = assignCoordNum(destroyerCoord2);

            return checkShipLive(firstCoordLetter, secondCoordLetter, firstCoordNum, secondCoordNum);
        }

        boolean checkShipLive(int firstCoordLetter, int secondCoordLetter, int firstCoordNum, int secondCoordNum) {
            for (int i = firstCoordLetter; i <= secondCoordLetter; i++) {
                for (int j = firstCoordNum; j < secondCoordNum; j++) {

                    if(Objects.equals(field[i][j], "O")) {
                        return true;
                    }

                }

            }
            return false;
        }

    }

  learner_created: true
- name: src/battleship/Game.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    public class Game {
        boolean gameIsFinished = false;
        public void startGame() {
            Field myField = new Field();
            Ships ships = new Ships();
            myField.createField();
            myField.printField();
            ships.startPlacingShips(myField);


            System.out.println();
            System.out.println("The game starts!");

            while(!gameIsFinished) {
                myField.printShots();
                if(myField.checkEmptyField()) {
                    gameIsFinished = true;
                } else {
                    takeShot(myField);
                }
            }
        }
        public void takeShot(Field field) {
            Scanner scanner = new Scanner(System.in);

            System.out.println();
            System.out.println("Take a shot!");
            System.out.println();
            String nextShotCoord = scanner.next();
            boolean shotChecked = field.checkShotValidation(nextShotCoord);
            while(!shotChecked) {
                nextShotCoord = scanner.next();
                shotChecked = field.checkShotValidation(nextShotCoord);
            }
            field.takeAShot(nextShotCoord);


        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10598#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Mon, 03 Oct 2022 12:37:04 UTC
record: -1
